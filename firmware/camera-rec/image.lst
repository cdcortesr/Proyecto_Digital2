
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000510  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000008  00000510  00000510  00000564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000518  00000518  0000056c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  0000052c  0000052c  00000580  2**2
                  ALLOC
  4 .debug_abbrev 000001eb  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060d  00000000  00000000  0000076b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003e3  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000130  00000000  00000000  0000115c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000166  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000084  00000000  00000000  000013f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  00001476  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000233  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  000016e9  2**0
                  CONTENTS, READONLY
 13 .debug_loc    0000011b  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00001815  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 78 	calli 2ac <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 05 30 	ori gp,gp,0x530
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 05 2c 	ori r1,r1,0x52c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 05 b0 	ori r3,r3,0x5b0

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 33 	calli 208 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <main>:
#include "soc-hw.h"


int main()
{
 208:	37 9c ff fc 	addi sp,sp,-4
 20c:	5b 9d 00 04 	sw (sp+4),ra
	camera_takeP();
 210:	f8 00 00 a3 	calli 49c <camera_takeP>
	camera_sendP();
 214:	f8 00 00 aa 	calli 4bc <camera_sendP>
}
 218:	2b 9d 00 04 	lw ra,(sp+4)
 21c:	37 9c 00 04 	addi sp,sp,4
 220:	c3 a0 00 00 	ret

00000224 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 224:	c3 a0 00 00 	ret

00000228 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 228:	78 01 00 00 	mvhi r1,0x0
 22c:	38 21 05 ac 	ori r1,r1,0x5ac
 230:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 234:	78 02 00 00 	mvhi r2,0x0
 238:	38 42 05 1c 	ori r2,r2,0x51c
 23c:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 240:	34 63 00 01 	addi r3,r3,1
 244:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 248:	34 01 00 0e 	mvi r1,14
 24c:	58 41 00 00 	sw (r2+0),r1
}
 250:	c3 a0 00 00 	ret

00000254 <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 254:	78 02 00 00 	mvhi r2,0x0
 258:	38 42 05 18 	ori r2,r2,0x518
	   timer0->tcr0 = 0xAA;
 25c:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 260:	28 44 00 00 	lw r4,(r2+0)
	   timer0->tcr0 = 0xAA;
 264:	38 21 05 1c 	ori r1,r1,0x51c
	   gpio0->ctrl=0x55;
 268:	78 02 00 00 	mvhi r2,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 26c:	28 23 00 00 	lw r3,(r1+0)
	   gpio0->ctrl=0x55;
 270:	38 42 05 20 	ori r2,r2,0x520
	   i2c0->rxtx=5;
 274:	78 01 00 00 	mvhi r1,0x0

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
 278:	28 42 00 00 	lw r2,(r2+0)
	   i2c0->rxtx=5;
 27c:	38 21 05 28 	ori r1,r1,0x528

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 280:	34 05 00 1e 	mvi r5,30
 284:	58 85 00 04 	sw (r4+4),r5
	   timer0->tcr0 = 0xAA;
	   gpio0->ctrl=0x55;
	   i2c0->rxtx=5;
 288:	28 21 00 00 	lw r1,(r1+0)
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 28c:	34 04 00 aa 	mvi r4,170
 290:	58 64 00 00 	sw (r3+0),r4
	   gpio0->ctrl=0x55;
 294:	34 03 00 55 	mvi r3,85
 298:	58 43 00 00 	sw (r2+0),r3
	   i2c0->rxtx=5;
 29c:	34 02 00 05 	mvi r2,5
 2a0:	58 22 00 00 	sw (r1+0),r2
	   i2c0->divisor=5;
 2a4:	58 22 00 04 	sw (r1+4),r2

}
 2a8:	c3 a0 00 00 	ret

000002ac <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 2ac:	37 9c ff f0 	addi sp,sp,-16
 2b0:	5b 8b 00 10 	sw (sp+16),r11
 2b4:	5b 8c 00 0c 	sw (sp+12),r12
 2b8:	5b 8d 00 08 	sw (sp+8),r13
 2bc:	5b 9d 00 04 	sw (sp+4),ra
 2c0:	78 0b 00 00 	mvhi r11,0x0
 2c4:	39 6b 05 2c 	ori r11,r11,0x52c
 2c8:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 2cc:	35 6d 00 80 	addi r13,r11,128
 2d0:	e0 00 00 04 	bi 2e0 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2d4:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 2d8:	45 6d 00 08 	be r11,r13,2f8 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 2dc:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 2e0:	21 81 00 01 	andi r1,r12,0x1
 2e4:	44 20 ff fc 	be r1,r0,2d4 <irq_handler+0x28>
 2e8:	29 61 00 00 	lw r1,(r11+0)
 2ec:	35 6b 00 04 	addi r11,r11,4
 2f0:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 2f4:	5d 6d ff fa 	bne r11,r13,2dc <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 2f8:	2b 9d 00 04 	lw ra,(sp+4)
 2fc:	2b 8b 00 10 	lw r11,(sp+16)
 300:	2b 8c 00 0c 	lw r12,(sp+12)
 304:	2b 8d 00 08 	lw r13,(sp+8)
 308:	37 9c 00 10 	addi sp,sp,16
 30c:	c3 a0 00 00 	ret

00000310 <isr_init>:

void isr_init()
{
 310:	78 01 00 00 	mvhi r1,0x0
 314:	78 02 00 00 	mvhi r2,0x0
 318:	38 21 05 2c 	ori r1,r1,0x52c
 31c:	38 42 02 24 	ori r2,r2,0x224
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 320:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 324:	58 22 00 00 	sw (r1+0),r2
 328:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 32c:	5c 23 ff fe 	bne r1,r3,324 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 330:	c3 a0 00 00 	ret

00000334 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 334:	78 03 00 00 	mvhi r3,0x0
 338:	3c 21 00 02 	sli r1,r1,2
 33c:	38 63 05 2c 	ori r3,r3,0x52c
 340:	b4 61 18 00 	add r3,r3,r1
 344:	58 62 00 00 	sw (r3+0),r2
}
 348:	c3 a0 00 00 	ret

0000034c <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 34c:	78 03 00 00 	mvhi r3,0x0
 350:	3c 21 00 02 	sli r1,r1,2
 354:	38 63 05 2c 	ori r3,r3,0x52c
 358:	78 02 00 00 	mvhi r2,0x0
 35c:	b4 61 18 00 	add r3,r3,r1
 360:	38 42 02 24 	ori r2,r2,0x224
 364:	58 62 00 00 	sw (r3+0),r2
}
 368:	c3 a0 00 00 	ret

0000036c <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 36c:	78 04 00 00 	mvhi r4,0x0
 370:	38 84 05 10 	ori r4,r4,0x510
 374:	28 83 00 00 	lw r3,(r4+0)
 378:	78 02 00 00 	mvhi r2,0x0
 37c:	38 42 05 1c 	ori r2,r2,0x51c
 380:	28 42 00 00 	lw r2,(r2+0)
 384:	88 23 08 00 	mul r1,r1,r3
 388:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 38c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 390:	34 01 00 08 	mvi r1,8
 394:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 398:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 39c:	20 21 00 01 	andi r1,r1,0x1
 3a0:	44 20 ff fe 	be r1,r0,398 <msleep+0x2c>
}
 3a4:	c3 a0 00 00 	ret

000003a8 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 3a8:	78 02 00 00 	mvhi r2,0x0
 3ac:	38 42 05 1c 	ori r2,r2,0x51c
 3b0:	28 42 00 00 	lw r2,(r2+0)
 3b4:	08 21 00 64 	muli r1,r1,100
 3b8:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3bc:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 3c0:	34 01 00 08 	mvi r1,8
 3c4:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 3c8:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 3cc:	20 21 00 01 	andi r1,r1,0x1
 3d0:	44 20 ff fe 	be r1,r0,3c8 <nsleep+0x20>
}
 3d4:	c3 a0 00 00 	ret

000003d8 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 3d8:	78 01 00 00 	mvhi r1,0x0
 3dc:	38 21 05 1c 	ori r1,r1,0x51c
 3e0:	28 23 00 00 	lw r3,(r1+0)
 3e4:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 3e8:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 3ec:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 3f0:	38 21 05 ac 	ori r1,r1,0x5ac

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 3f4:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 3f8:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 3fc:	78 02 00 00 	mvhi r2,0x0
 400:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 404:	34 04 00 0e 	mvi r4,14
 408:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 40c:	38 21 05 2c 	ori r1,r1,0x52c
 410:	38 42 02 28 	ori r2,r2,0x228
 414:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 418:	c3 a0 00 00 	ret

0000041c <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 41c:	c3 a0 00 00 	ret

00000420 <uart_getchar>:

char uart_getchar()
{   
 420:	78 01 00 00 	mvhi r1,0x0
 424:	38 21 05 18 	ori r1,r1,0x518
 428:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 42c:	28 41 00 00 	lw r1,(r2+0)
 430:	20 21 00 01 	andi r1,r1,0x1
 434:	44 20 ff fe 	be r1,r0,42c <uart_getchar+0xc>
	return uart0->rxtx;
 438:	28 41 00 04 	lw r1,(r2+4)
}
 43c:	20 21 00 ff 	andi r1,r1,0xff
 440:	c3 a0 00 00 	ret

00000444 <uart_putchar>:

void uart_putchar(char c)
{
 444:	78 02 00 00 	mvhi r2,0x0
 448:	38 42 05 18 	ori r2,r2,0x518
 44c:	28 43 00 00 	lw r3,(r2+0)
 450:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 454:	28 62 00 00 	lw r2,(r3+0)
 458:	20 42 00 10 	andi r2,r2,0x10
 45c:	5c 40 ff fe 	bne r2,r0,454 <uart_putchar+0x10>
	uart0->rxtx = c;
 460:	58 61 00 04 	sw (r3+4),r1
}
 464:	c3 a0 00 00 	ret

00000468 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 468:	40 24 00 00 	lbu r4,(r1+0)
 46c:	44 80 00 0b 	be r4,r0,498 <uart_putstr+0x30>
 470:	78 02 00 00 	mvhi r2,0x0
 474:	38 42 05 18 	ori r2,r2,0x518
 478:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 47c:	28 62 00 00 	lw r2,(r3+0)
 480:	20 42 00 10 	andi r2,r2,0x10
 484:	5c 40 ff fe 	bne r2,r0,47c <uart_putstr+0x14>
	uart0->rxtx = c;
 488:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 48c:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 490:	40 24 00 00 	lbu r4,(r1+0)
 494:	5c 82 ff fa 	bne r4,r2,47c <uart_putstr+0x14>
 498:	c3 a0 00 00 	ret

0000049c <camera_takeP>:
/***************************************************************************
 * Camera Functions
 */

void camera_takeP(){
	camera0->Tomar_imagen=1;
 49c:	78 01 00 00 	mvhi r1,0x0
 4a0:	38 21 05 24 	ori r1,r1,0x524
 4a4:	28 22 00 00 	lw r2,(r1+0)
 4a8:	34 01 00 01 	mvi r1,1
 4ac:	58 41 00 00 	sw (r2+0),r1
	while(!(camera0->Picture_Avail));
 4b0:	28 41 00 04 	lw r1,(r2+4)
 4b4:	44 20 ff ff 	be r1,r0,4b0 <camera_takeP+0x14>
}
 4b8:	c3 a0 00 00 	ret

000004bc <camera_sendP>:

void camera_sendP(){
	char pixel;
	int i=0;
 4bc:	78 02 00 00 	mvhi r2,0x0
 4c0:	78 01 00 00 	mvhi r1,0x0
 4c4:	38 42 05 24 	ori r2,r2,0x524
 4c8:	38 21 05 18 	ori r1,r1,0x518
 4cc:	28 44 00 00 	lw r4,(r2+0)
 4d0:	28 22 00 00 	lw r2,(r1+0)
	while(i<307200) /*for(i=0;i<307200;i++)*/{
 4d4:	78 01 00 00 	mvhi r1,0x0
 4d8:	38 21 05 14 	ori r1,r1,0x514
 4dc:	28 26 00 00 	lw r6,(r1+0)
	while(!(camera0->Picture_Avail));
}

void camera_sendP(){
	char pixel;
	int i=0;
 4e0:	34 03 00 00 	mvi r3,0
 4e4:	20 61 00 ff 	andi r1,r3,0xff
	while(i<307200) /*for(i=0;i<307200;i++)*/{
		camera0->pIm=i;
 4e8:	30 81 00 08 	sb (r4+8),r1
		pixel=camera0->pIm;
 4ec:	40 85 00 08 	lbu r5,(r4+8)
 4f0:	20 a5 00 ff 	andi r5,r5,0xff
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4f4:	28 41 00 00 	lw r1,(r2+0)
 4f8:	20 21 00 10 	andi r1,r1,0x10
 4fc:	5c 20 ff fe 	bne r1,r0,4f4 <camera_sendP+0x38>
	uart0->rxtx = c;
 500:	58 45 00 04 	sw (r2+4),r5
	int i=0;
	while(i<307200) /*for(i=0;i<307200;i++)*/{
		camera0->pIm=i;
		pixel=camera0->pIm;
		uart_putchar(pixel);
		i++;
 504:	34 63 00 01 	addi r3,r3,1
}

void camera_sendP(){
	char pixel;
	int i=0;
	while(i<307200) /*for(i=0;i<307200;i++)*/{
 508:	5c 66 ff f7 	bne r3,r6,4e4 <camera_sendP+0x28>
		camera0->pIm=i;
		pixel=camera0->pIm;
		uart_putchar(pixel);
		i++;
	}
}
 50c:	c3 a0 00 00 	ret
