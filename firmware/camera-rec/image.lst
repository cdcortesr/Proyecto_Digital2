
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         0000069c  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000008  0000069c  0000069c  000006f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  000006a4  000006a4  000006f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  000006b8  000006b8  0000070c  2**2
                  ALLOC
  4 .debug_abbrev 000002ae  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b4  00000000  00000000  000009ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005c9  00000000  00000000  0000126e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001e0  00000000  00000000  00001838  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000002b0  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000233  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 000000a1  00000000  00000000  00001efb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000304  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000011  00000000  00000000  00002310  2**0
                  CONTENTS, READONLY

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 94 	calli 31c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 3f fc 	ori sp,sp,0x3ffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 06 c0 	ori gp,gp,0x6c0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 06 b8 	ori r1,r1,0x6b8
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 07 3c 	ori r3,r3,0x73c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 36 	calli 214 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <mod>:
#include "soc-hw.h"
#define MAX 100*100	
	
uint8_t mod(uint32_t a, uint32_t b){

	return (a-((a/b)*b));
 208:	c4 22 08 00 	modu r1,r1,r2
}
 20c:	20 21 00 ff 	andi r1,r1,0xff
 210:	c3 a0 00 00 	ret

00000214 <main>:

int main(){
 214:	37 9c ff ec 	addi sp,sp,-20
 218:	5b 8b 00 14 	sw (sp+20),r11
 21c:	5b 8c 00 10 	sw (sp+16),r12
 220:	5b 8d 00 0c 	sw (sp+12),r13
 224:	5b 8e 00 08 	sw (sp+8),r14
 228:	5b 9d 00 04 	sw (sp+4),ra
	
	uint32_t  j=MAX;
	for(j;j>1;j--)
		uart_putchar(j);
	*/
	camera_takeP();
 22c:	f8 00 00 b8 	calli 50c <camera_takeP>
	pantalla_wEnable(1);
 230:	34 01 00 01 	mvi r1,1
 234:	f8 00 00 e9 	calli 5d8 <pantalla_wEnable>
		
	uint32_t i=0;
 238:	34 0b 00 00 	mvi r11,0
#include "soc-hw.h"
#define MAX 100*100	
	
uint8_t mod(uint32_t a, uint32_t b){

	return (a-((a/b)*b));
 23c:	34 0d 00 03 	mvi r13,3
	uint32_t i=0;
	while(i<MAX){
		if(mod(i,3)==0){
			Y=camera_pixel(i);
			pantalla_receiveRed(Y);
		}else if(mod(i,3)==1){
 240:	34 0e 00 01 	mvi r14,1
	*/
	camera_takeP();
	pantalla_wEnable(1);
		
	uint32_t i=0;
	while(i<MAX){
 244:	34 0c 27 10 	mvi r12,10000
 248:	e0 00 00 06 	bi 260 <main+0x4c>
		if(mod(i,3)==0){
			Y=camera_pixel(i);
			pantalla_receiveRed(Y);
		}else if(mod(i,3)==1){
 24c:	44 4e 00 19 	be r2,r14,2b0 <main+0x9c>
			U=camera_pixel(i);
			pantalla_receiveGreen(U);
		}else{
			V=camera_pixel(i);
 250:	f8 00 00 c9 	calli 574 <camera_pixel>
			pantalla_receiveBlue(V);
 254:	f8 00 00 db 	calli 5c0 <pantalla_receiveBlue>
			Y=0;
			U=0;
			V=0;
			
		}
		i++;
 258:	35 6b 00 01 	addi r11,r11,1
	*/
	camera_takeP();
	pantalla_wEnable(1);
		
	uint32_t i=0;
	while(i<MAX){
 25c:	45 6c 00 08 	be r11,r12,27c <main+0x68>
#include "soc-hw.h"
#define MAX 100*100	
	
uint8_t mod(uint32_t a, uint32_t b){

	return (a-((a/b)*b));
 260:	c5 6d 10 00 	modu r2,r11,r13
			pantalla_receiveRed(Y);
		}else if(mod(i,3)==1){
			U=camera_pixel(i);
			pantalla_receiveGreen(U);
		}else{
			V=camera_pixel(i);
 264:	b9 60 08 00 	mv r1,r11
	camera_takeP();
	pantalla_wEnable(1);
		
	uint32_t i=0;
	while(i<MAX){
		if(mod(i,3)==0){
 268:	5c 40 ff f9 	bne r2,r0,24c <main+0x38>
			Y=camera_pixel(i);
 26c:	f8 00 00 c2 	calli 574 <camera_pixel>
			Y=0;
			U=0;
			V=0;
			
		}
		i++;
 270:	35 6b 00 01 	addi r11,r11,1
		
	uint32_t i=0;
	while(i<MAX){
		if(mod(i,3)==0){
			Y=camera_pixel(i);
			pantalla_receiveRed(Y);
 274:	f8 00 00 c7 	calli 590 <pantalla_receiveRed>
	*/
	camera_takeP();
	pantalla_wEnable(1);
		
	uint32_t i=0;
	while(i<MAX){
 278:	5d 6c ff fa 	bne r11,r12,260 <main+0x4c>
			
		}
		i++;
	}

	pantalla_wEnable(0);
 27c:	34 01 00 00 	mvi r1,0
 280:	f8 00 00 d6 	calli 5d8 <pantalla_wEnable>
	pantalla_reset();
 284:	f8 00 00 e1 	calli 608 <pantalla_reset>
	pantalla_rEnable(1);
 288:	34 01 00 01 	mvi r1,1
 28c:	f8 00 00 d9 	calli 5f0 <pantalla_rEnable>


	return 0;
	
}
 290:	34 01 00 00 	mvi r1,0
 294:	2b 9d 00 04 	lw ra,(sp+4)
 298:	2b 8b 00 14 	lw r11,(sp+20)
 29c:	2b 8c 00 10 	lw r12,(sp+16)
 2a0:	2b 8d 00 0c 	lw r13,(sp+12)
 2a4:	2b 8e 00 08 	lw r14,(sp+8)
 2a8:	37 9c 00 14 	addi sp,sp,20
 2ac:	c3 a0 00 00 	ret
	while(i<MAX){
		if(mod(i,3)==0){
			Y=camera_pixel(i);
			pantalla_receiveRed(Y);
		}else if(mod(i,3)==1){
			U=camera_pixel(i);
 2b0:	b9 60 08 00 	mv r1,r11
 2b4:	f8 00 00 b0 	calli 574 <camera_pixel>
			pantalla_receiveGreen(U);
 2b8:	f8 00 00 bc 	calli 5a8 <pantalla_receiveGreen>
 2bc:	e3 ff ff e7 	bi 258 <main+0x44>

000002c0 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 2c0:	c3 a0 00 00 	ret

000002c4 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2c4:	78 01 00 00 	mvhi r1,0x0
 2c8:	38 21 07 38 	ori r1,r1,0x738
 2cc:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2d0:	78 02 00 00 	mvhi r2,0x0
 2d4:	38 42 06 a8 	ori r2,r2,0x6a8
 2d8:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 2dc:	34 63 00 01 	addi r3,r3,1
 2e0:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 2e4:	34 01 00 0e 	mvi r1,14
 2e8:	58 41 00 00 	sw (r2+0),r1
}
 2ec:	c3 a0 00 00 	ret

000002f0 <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 2f0:	78 02 00 00 	mvhi r2,0x0
 2f4:	38 42 06 a4 	ori r2,r2,0x6a4
	   timer0->tcr0 = 0xAA;
 2f8:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 2fc:	28 42 00 00 	lw r2,(r2+0)
	   timer0->tcr0 = 0xAA;
 300:	38 21 06 a8 	ori r1,r1,0x6a8
 304:	28 21 00 00 	lw r1,(r1+0)

isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 308:	34 03 00 1e 	mvi r3,30
 30c:	58 43 00 04 	sw (r2+4),r3
	   timer0->tcr0 = 0xAA;
 310:	34 02 00 aa 	mvi r2,170
 314:	58 22 00 00 	sw (r1+0),r2
	   //gpio0->ctrl=0x55;
	   //i2c0->rxtx=5;
	   //i2c0->divisor=5;

}
 318:	c3 a0 00 00 	ret

0000031c <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 31c:	37 9c ff f0 	addi sp,sp,-16
 320:	5b 8b 00 10 	sw (sp+16),r11
 324:	5b 8c 00 0c 	sw (sp+12),r12
 328:	5b 8d 00 08 	sw (sp+8),r13
 32c:	5b 9d 00 04 	sw (sp+4),ra
 330:	78 0b 00 00 	mvhi r11,0x0
 334:	39 6b 06 b8 	ori r11,r11,0x6b8
 338:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 33c:	35 6d 00 80 	addi r13,r11,128
 340:	e0 00 00 04 	bi 350 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 344:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 348:	45 6d 00 08 	be r11,r13,368 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 34c:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 350:	21 81 00 01 	andi r1,r12,0x1
 354:	44 20 ff fc 	be r1,r0,344 <irq_handler+0x28>
 358:	29 61 00 00 	lw r1,(r11+0)
 35c:	35 6b 00 04 	addi r11,r11,4
 360:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 364:	5d 6d ff fa 	bne r11,r13,34c <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 368:	2b 9d 00 04 	lw ra,(sp+4)
 36c:	2b 8b 00 10 	lw r11,(sp+16)
 370:	2b 8c 00 0c 	lw r12,(sp+12)
 374:	2b 8d 00 08 	lw r13,(sp+8)
 378:	37 9c 00 10 	addi sp,sp,16
 37c:	c3 a0 00 00 	ret

00000380 <isr_init>:

void isr_init()
{
 380:	78 01 00 00 	mvhi r1,0x0
 384:	78 02 00 00 	mvhi r2,0x0
 388:	38 21 06 b8 	ori r1,r1,0x6b8
 38c:	38 42 02 c0 	ori r2,r2,0x2c0
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 390:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 394:	58 22 00 00 	sw (r1+0),r2
 398:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 39c:	5c 23 ff fe 	bne r1,r3,394 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 3a0:	c3 a0 00 00 	ret

000003a4 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 3a4:	78 03 00 00 	mvhi r3,0x0
 3a8:	3c 21 00 02 	sli r1,r1,2
 3ac:	38 63 06 b8 	ori r3,r3,0x6b8
 3b0:	b4 61 18 00 	add r3,r3,r1
 3b4:	58 62 00 00 	sw (r3+0),r2
}
 3b8:	c3 a0 00 00 	ret

000003bc <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 3bc:	78 03 00 00 	mvhi r3,0x0
 3c0:	3c 21 00 02 	sli r1,r1,2
 3c4:	38 63 06 b8 	ori r3,r3,0x6b8
 3c8:	78 02 00 00 	mvhi r2,0x0
 3cc:	b4 61 18 00 	add r3,r3,r1
 3d0:	38 42 02 c0 	ori r2,r2,0x2c0
 3d4:	58 62 00 00 	sw (r3+0),r2
}
 3d8:	c3 a0 00 00 	ret

000003dc <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 3dc:	78 04 00 00 	mvhi r4,0x0
 3e0:	38 84 06 9c 	ori r4,r4,0x69c
 3e4:	28 83 00 00 	lw r3,(r4+0)
 3e8:	78 02 00 00 	mvhi r2,0x0
 3ec:	38 42 06 a8 	ori r2,r2,0x6a8
 3f0:	28 42 00 00 	lw r2,(r2+0)
 3f4:	88 23 08 00 	mul r1,r1,r3
 3f8:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 3fc:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 400:	34 01 00 08 	mvi r1,8
 404:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 408:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 40c:	20 21 00 01 	andi r1,r1,0x1
 410:	44 20 ff fe 	be r1,r0,408 <msleep+0x2c>
}
 414:	c3 a0 00 00 	ret

00000418 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 418:	78 02 00 00 	mvhi r2,0x0
 41c:	38 42 06 a8 	ori r2,r2,0x6a8
 420:	28 42 00 00 	lw r2,(r2+0)
 424:	08 21 00 64 	muli r1,r1,100
 428:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 42c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 430:	34 01 00 08 	mvi r1,8
 434:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 438:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 43c:	20 21 00 01 	andi r1,r1,0x1
 440:	44 20 ff fe 	be r1,r0,438 <nsleep+0x20>
}
 444:	c3 a0 00 00 	ret

00000448 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 448:	78 01 00 00 	mvhi r1,0x0
 44c:	38 21 06 a8 	ori r1,r1,0x6a8
 450:	28 23 00 00 	lw r3,(r1+0)
 454:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 458:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 45c:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 460:	38 21 07 38 	ori r1,r1,0x738

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 464:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 468:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 46c:	78 02 00 00 	mvhi r2,0x0
 470:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 474:	34 04 00 0e 	mvi r4,14
 478:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 47c:	38 21 06 b8 	ori r1,r1,0x6b8
 480:	38 42 02 c4 	ori r2,r2,0x2c4
 484:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 488:	c3 a0 00 00 	ret

0000048c <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 48c:	c3 a0 00 00 	ret

00000490 <uart_getchar>:

char uart_getchar()
{   
 490:	78 01 00 00 	mvhi r1,0x0
 494:	38 21 06 a4 	ori r1,r1,0x6a4
 498:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 49c:	28 41 00 00 	lw r1,(r2+0)
 4a0:	20 21 00 01 	andi r1,r1,0x1
 4a4:	44 20 ff fe 	be r1,r0,49c <uart_getchar+0xc>
	return uart0->rxtx;
 4a8:	28 41 00 04 	lw r1,(r2+4)
}
 4ac:	20 21 00 ff 	andi r1,r1,0xff
 4b0:	c3 a0 00 00 	ret

000004b4 <uart_putchar>:

void uart_putchar(char c)
{
 4b4:	78 02 00 00 	mvhi r2,0x0
 4b8:	38 42 06 a4 	ori r2,r2,0x6a4
 4bc:	28 43 00 00 	lw r3,(r2+0)
 4c0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 4c4:	28 62 00 00 	lw r2,(r3+0)
 4c8:	20 42 00 10 	andi r2,r2,0x10
 4cc:	5c 40 ff fe 	bne r2,r0,4c4 <uart_putchar+0x10>
	uart0->rxtx = c;
 4d0:	58 61 00 04 	sw (r3+4),r1
}
 4d4:	c3 a0 00 00 	ret

000004d8 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4d8:	40 24 00 00 	lbu r4,(r1+0)
 4dc:	44 80 00 0b 	be r4,r0,508 <uart_putstr+0x30>
 4e0:	78 02 00 00 	mvhi r2,0x0
 4e4:	38 42 06 a4 	ori r2,r2,0x6a4
 4e8:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 4ec:	28 62 00 00 	lw r2,(r3+0)
 4f0:	20 42 00 10 	andi r2,r2,0x10
 4f4:	5c 40 ff fe 	bne r2,r0,4ec <uart_putstr+0x14>
	uart0->rxtx = c;
 4f8:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 4fc:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 500:	40 24 00 00 	lbu r4,(r1+0)
 504:	5c 82 ff fa 	bne r4,r2,4ec <uart_putstr+0x14>
 508:	c3 a0 00 00 	ret

0000050c <camera_takeP>:
/***************************************************************************
 * Camera Functions
 */

void camera_takeP(){
	camera0->Tomar_imagen=1;
 50c:	78 01 00 00 	mvhi r1,0x0
 510:	38 21 06 b0 	ori r1,r1,0x6b0
 514:	28 21 00 00 	lw r1,(r1+0)
 518:	34 02 00 01 	mvi r2,1
 51c:	58 22 00 00 	sw (r1+0),r2
	//uint32_t contador=0;
	//while((camera0->Picture_Avail)!=1)
		//contador=camera0->Tomar_imagen;
	//	uart_putchar(0x3);
}
 520:	c3 a0 00 00 	ret

00000524 <camera_sendP>:

void camera_sendP(){
	char pixel;
	int i=0;
 524:	78 02 00 00 	mvhi r2,0x0
 528:	78 01 00 00 	mvhi r1,0x0
 52c:	38 42 06 b0 	ori r2,r2,0x6b0
 530:	38 21 06 a4 	ori r1,r1,0x6a4
 534:	28 44 00 00 	lw r4,(r2+0)
 538:	28 22 00 00 	lw r2,(r1+0)
	
	while(i<307200) /*for(i=0;i<307200;i++)*/{
 53c:	78 01 00 00 	mvhi r1,0x0
 540:	38 21 06 a0 	ori r1,r1,0x6a0
 544:	28 26 00 00 	lw r6,(r1+0)
	//	uart_putchar(0x3);
}

void camera_sendP(){
	char pixel;
	int i=0;
 548:	34 03 00 00 	mvi r3,0
	
	while(i<307200) /*for(i=0;i<307200;i++)*/{
		camera0->pIm=i;		//wb_address=camera0->pIm	// wb_dat_i=i 
 54c:	58 83 00 08 	sw (r4+8),r3
		pixel=camera0->pIm;	//wb_address=camera0->pIm(i)	// pixel=wb_dat_o
 550:	28 85 00 08 	lw r5,(r4+8)
 554:	20 a5 00 ff 	andi r5,r5,0xff
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 558:	28 41 00 00 	lw r1,(r2+0)
 55c:	20 21 00 10 	andi r1,r1,0x10
 560:	5c 20 ff fe 	bne r1,r0,558 <camera_sendP+0x34>
	uart0->rxtx = c;
 564:	58 45 00 04 	sw (r2+4),r5
	while(i<307200) /*for(i=0;i<307200;i++)*/{
		camera0->pIm=i;		//wb_address=camera0->pIm	// wb_dat_i=i 
		pixel=camera0->pIm;	//wb_address=camera0->pIm(i)	// pixel=wb_dat_o
		uart_putchar(pixel);
		
		i++;
 568:	34 63 00 01 	addi r3,r3,1

void camera_sendP(){
	char pixel;
	int i=0;
	
	while(i<307200) /*for(i=0;i<307200;i++)*/{
 56c:	5c 66 ff f8 	bne r3,r6,54c <camera_sendP+0x28>
		uart_putchar(pixel);
		
		i++;
	}
	
}
 570:	c3 a0 00 00 	ret

00000574 <camera_pixel>:

char camera_pixel(int address){
	char pixel;
	camera0->pIm=address;
 574:	78 02 00 00 	mvhi r2,0x0
 578:	38 42 06 b0 	ori r2,r2,0x6b0
 57c:	28 42 00 00 	lw r2,(r2+0)
 580:	58 41 00 08 	sw (r2+8),r1
	pixel=camera0->pIm;
 584:	28 41 00 08 	lw r1,(r2+8)
	return pixel;

}
 588:	20 21 00 ff 	andi r1,r1,0xff
 58c:	c3 a0 00 00 	ret

00000590 <pantalla_receiveRed>:
/***************************************************************************
 * Pantalla Functions
 */

void pantalla_receiveRed(char pixel){
	pantalla0->red=pixel;
 590:	78 02 00 00 	mvhi r2,0x0
 594:	38 42 06 ac 	ori r2,r2,0x6ac
 598:	28 42 00 00 	lw r2,(r2+0)

/***************************************************************************
 * Pantalla Functions
 */

void pantalla_receiveRed(char pixel){
 59c:	20 21 00 ff 	andi r1,r1,0xff
	pantalla0->red=pixel;
 5a0:	58 41 00 00 	sw (r2+0),r1
}
 5a4:	c3 a0 00 00 	ret

000005a8 <pantalla_receiveGreen>:

void pantalla_receiveGreen(char pixel){
	pantalla0->green=pixel;
 5a8:	78 02 00 00 	mvhi r2,0x0
 5ac:	38 42 06 ac 	ori r2,r2,0x6ac
 5b0:	28 42 00 00 	lw r2,(r2+0)

void pantalla_receiveRed(char pixel){
	pantalla0->red=pixel;
}

void pantalla_receiveGreen(char pixel){
 5b4:	20 21 00 ff 	andi r1,r1,0xff
	pantalla0->green=pixel;
 5b8:	58 41 00 04 	sw (r2+4),r1

}
 5bc:	c3 a0 00 00 	ret

000005c0 <pantalla_receiveBlue>:

void pantalla_receiveBlue(char pixel){
	pantalla0->blue=pixel;
 5c0:	78 02 00 00 	mvhi r2,0x0
 5c4:	38 42 06 ac 	ori r2,r2,0x6ac
 5c8:	28 42 00 00 	lw r2,(r2+0)
void pantalla_receiveGreen(char pixel){
	pantalla0->green=pixel;

}

void pantalla_receiveBlue(char pixel){
 5cc:	20 21 00 ff 	andi r1,r1,0xff
	pantalla0->blue=pixel;
 5d0:	58 41 00 08 	sw (r2+8),r1
}
 5d4:	c3 a0 00 00 	ret

000005d8 <pantalla_wEnable>:

void pantalla_wEnable(){
	pantalla0->w_enable=1;
 5d8:	78 01 00 00 	mvhi r1,0x0
 5dc:	38 21 06 ac 	ori r1,r1,0x6ac
 5e0:	28 21 00 00 	lw r1,(r1+0)
 5e4:	34 02 00 01 	mvi r2,1
 5e8:	58 22 00 0c 	sw (r1+12),r2
}
 5ec:	c3 a0 00 00 	ret

000005f0 <pantalla_rEnable>:

void pantalla_rEnable(){
	pantalla0->r_enable=1;
 5f0:	78 01 00 00 	mvhi r1,0x0
 5f4:	38 21 06 ac 	ori r1,r1,0x6ac
 5f8:	28 21 00 00 	lw r1,(r1+0)
 5fc:	34 02 00 01 	mvi r2,1
 600:	58 22 00 10 	sw (r1+16),r2
}
 604:	c3 a0 00 00 	ret

00000608 <pantalla_reset>:

void pantalla_reset(){
	pantalla0->reset=1;
 608:	78 01 00 00 	mvhi r1,0x0
 60c:	38 21 06 ac 	ori r1,r1,0x6ac
 610:	28 21 00 00 	lw r1,(r1+0)
 614:	34 02 00 01 	mvi r2,1
 618:	58 22 00 14 	sw (r1+20),r2
	pantalla0->reset=0;
 61c:	58 20 00 14 	sw (r1+20),r0
}
 620:	c3 a0 00 00 	ret

00000624 <i2c_init>:
 * I2C Functions
 */


void i2c_init(uint8_t PRERlo,uint8_t PRERhi){
	i2c0->prerL = PRERlo;
 624:	78 03 00 00 	mvhi r3,0x0
 628:	38 63 06 b4 	ori r3,r3,0x6b4
 62c:	28 63 00 00 	lw r3,(r3+0)
/***************************************************************************
 * I2C Functions
 */


void i2c_init(uint8_t PRERlo,uint8_t PRERhi){
 630:	20 21 00 ff 	andi r1,r1,0xff
 634:	20 42 00 ff 	andi r2,r2,0xff
	i2c0->prerL = PRERlo;
 638:	30 61 00 00 	sb (r3+0),r1
	i2c0->prerH = PRERhi;
 63c:	30 62 00 01 	sb (r3+1),r2
	i2c0->ctr   = 0x80;    //Enable core	
 640:	34 01 ff 80 	mvi r1,-128
 644:	30 61 00 02 	sb (r3+2),r1

}
 648:	c3 a0 00 00 	ret

0000064c <i2c_write>:

//The device slave addresses are 42 for write and 43 for read.

void i2c_write(uint8_t addr,uint8_t slvAddr,uint8_t data){ 
	i2c0->txr = addr<<1;
 64c:	78 02 00 00 	mvhi r2,0x0
 650:	38 42 06 b4 	ori r2,r2,0x6b4
 654:	28 42 00 00 	lw r2,(r2+0)
 658:	3c 21 00 01 	sli r1,r1,1
 65c:	20 21 00 fe 	andi r1,r1,0xfe
 660:	30 41 00 05 	sb (r2+5),r1
	i2c0->cr   = 0x90;		//Start and write
 664:	34 01 ff 90 	mvi r1,-112
 668:	30 41 00 06 	sb (r2+6),r1
	i2c0->cr   = 0x10;		//Write
	while(!(i2c0->sr & tip)); 
	i2c0->txr = data;
	i2c0->cr   = 0x50;		//Write and stop
	while(!(i2c0->sr & tip));*/
}
 66c:	c3 a0 00 00 	ret

00000670 <i2c_read>:

void i2c_read(uint8_t addr,uint8_t slvAddr){
 670:	20 21 00 ff 	andi r1,r1,0xff
	uint8_t data;
	i2c0->txr = (addr<<1)|1;
 674:	78 02 00 00 	mvhi r2,0x0
 678:	38 42 06 b4 	ori r2,r2,0x6b4
 67c:	3c 21 00 01 	sli r1,r1,1
 680:	28 42 00 00 	lw r2,(r2+0)
 684:	38 21 00 01 	ori r1,r1,0x1
 688:	20 21 00 ff 	andi r1,r1,0xff
 68c:	30 41 00 05 	sb (r2+5),r1
	i2c0->cr   = 0x90;		//Start and write
 690:	34 01 ff 90 	mvi r1,-112
 694:	30 41 00 06 	sb (r2+6),r1
	data = i2c0->rxr;
	i2c0->cr   = 0x28;		//Read and stop
	while(!(i2c0->sr & tip));
	uart_putchar(data);*/

}
 698:	c3 a0 00 00 	ret
